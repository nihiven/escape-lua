{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"layer",
				"layerKey"
			],
			[
				"ev",
				"love.event.push"
			],
			[
				"tileset",
				"tilesetBatch"
			],
			[
				"_tileset",
				"_tilesetBatch"
			],
			[
				"_tile",
				"_tilesetBatch"
			],
			[
				"problems",
				"problemsRemaining"
			],
			[
				"random",
				"love.math.getRandomSeed"
			],
			[
				"SM_",
				"SM_LENGTH"
			],
			[
				"sm_api",
				"sm_api_title"
			],
			[
				"sm",
				"sm_api_message"
			],
			[
				"colors",
				"colorsRGB"
			],
			[
				"selected",
				"selectedX"
			],
			[
				"rec",
				"love.graphics.rectangle"
			],
			[
				"mat",
				"math.floor	(x)"
			],
			[
				"width",
				"love.graphics.getWidth"
			],
			[
				"inventory",
				"inventoryNormal"
			],
			[
				"message",
				"messages"
			],
			[
				"can",
				"love.graphics.newCanvas"
			],
			[
				"grap",
				"love.graphics.draw"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.lua",
			"settings":
			{
				"buffer_size": 2795,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "--[[ MAP ]]\n-- global map object\n-- loads map definition file, textures and layout\n-- draws map to screen\nreturn {\n	-- map properties from tiled file\n	_width = nil,\n	_height = nil,\n	_renderorder = nil,\n\n	-- internal components\n	_layers = {},\n	_tilesets = {}, -- image object for tilesets\n	_tilesetBatch = {},\n	_tileQuads = {},\n\n	load = function(self, _game)\n		debug.print('load map data')\n\n		-- load main map information\n\n		\n		-- load tileset images and create tileset batch\n		for key,source in pairs(self._data.tilesets) do\n			debug.print(' load tileset: ' .. source.file)\n			local tileset = love.graphics.newImage('maps/' .. source.file)\n			local tilesetBatch = love.graphics.newSpriteBatch(tileset, self._data.width * self._data.height, 'static')\n\n			-- TODO: check for errors\n			self._tilesets[key] = tileset\n			self._tilesetBatch[key] = tilesetBatch\n		end\n		debug.print(' tilesets loaded')\n\n\n		-- load used quads\n		-- quads are the tiles from a given layer, referenced in layers.data[] \n		-- if map layers.data[x] has quad 195, we need to create a new Love quad from the layer image using the coordinates for tile 195\n\n\n\n		debug.print('map.load() complete')\n	end, -- load()\n\n	draw = function(self, _parameters)\n		local deferred = _parameters.deferred or false -- default to false\n\n		-- when accesing sources / layers layerKey always refers to the current layer\n		for layerKey,layer in pairs(self._data.layers) do\n			\n			-- only draw layers that match incoming deferred parameter\n			if (deferred == self._data.sources[layerKey].deferred) then\n				self._tilesetBatch[layerKey]:clear()\n\n				for tileKey,tileIndex in pairs(layer) do\n					if (tileIndex ~= 0) then -- 0 are empty tiles\n						--debug.print('id:' .. tileIndex)\n						--debug.print('ad:' .. self._data.sources[layerKey].tiledAdjust)\n						--debug.print(tileIndex)\n						tileIndex = tileIndex - self._data.sources[layerKey].tiledAdjust -- adjust for Tiled index offset 'firstgid - 1'\n\n						-- shortcut: need source for xy width height\n						local source = self._data.sources[layerKey]\n\n						-- local x,y are grid coordinates, source values are pixel values for the grid\n						local x = math.fmod(tileKey-1,self._data.width) * self._data.tileWidth\n						local y = math.floor((tileKey-1) / self._data.width) * self._data.tileHeight\n\n						--debug.print(tileKey .. ':' .. x .. ':' .. y)\n						self._tilesetBatch[layerKey]:add(self._tileQuads[layerKey][tileIndex], x, y)\n					end -- if\n				end\n				\n				self._tilesetBatch[layerKey]:flush()\n				love.graphics.draw(self._tilesetBatch[layerKey])\n\n			end -- if deferred\n		end -- for layer\n	end, -- draw\n\n	--------\n	-- highlightGrid()\n	--------\n	highlightGrid = function(_x, _y)\n		local xy = self.getXYFromGrid(_x, _y)\n		love.graphics.setColor(0, 255, 0)\n		love.graphics.rectangle('line', xy.x, xy.y, self._data.tileWidth-1, self._data.tileHeight-1)\n		love.graphics.setColor(255, 255, 255)\n	end,\n\n	--------\n	-- isMoveable()\n	--------\n	isMoveable = function(_x, _y, _width, _height)\n		local grid = self.getGridFromXY(_x, _y)\n		local key = (grid.y * self._data.width) + grid.x\n		local moveable = self._data.movement[key1]\n\n		love.graphics.setColor(0, 255, 0)\n		self.highlightGrid(grid.x, grid.y)\n		love.graphics.setColor(255, 255, 255)\n\n		--debug.print(grid.x .. '/' .. grid.y)\n		--debug.print(key)\n		--debug.print(moveable)\n		if (moveable == 1) then\n			return false\n		else\n			return true\n		end\n	end,\n\n	--------\n	-- getGridFromXy()\n	--------\n	getGridFromXY = function(_x, _y)\n		local x = math.ceil(_x / self._data.tileWidth) -- always half of the number of pixels per tile ? TODO: stupid\n		local y = math.ceil(_y / self._data.tileHeight) -- always half of the number of pixels per tile ? TODO: stupid\n		return {x = x, y = y}\n	end,\n\n	--------\n	-- getXYFromGrid()\n	--------\n	getXYFromGrid = function(_x, _y)\n		-- subtract one to offset the 1,1 grid translation\n		local x = math.floor((_x-1) * self._data.tileWidth)\n		local y = math.floor((_y-1) * self._data.tileHeight)\n		return {x = x, y = y}\n	end,\n\n	--------\n	-- conversion()\n	-- converts from Tiled LUA format\n	--------\n	conversion = function(_mapFile)\n		debug.print('map.conversion()' .. ': _mapFile: ' .. _mapFile)\n		local plicard = require(_mapFile)\n		local m = {}\n		m.width = plicard.width\n		m.height = plicard.height\n		m.tileWidth = plicard.tilewidth\n		m.tileHeight = plicard.tileheight\n\n		m.tilesets = {}\n		for key,value in pairs(plicard.tilesets) do\n			m.tilesets[key] = value\n			m.tilesets[key].file = m.tilesets[key].image -- because we want image to be an image object and file to be the file name\n			m.tilesets[key].image = nil -- haven't loaded the image yet\n		end\n\n		m.layers = {}\n		for key,value in pairs(plicard.layers) do\n			m.layers[key] = {}\n			m.layers[key].name = value.name\n\n			if (value.type == 'tilelayer') then\n				for index,tile in pairs(value.data) do\n					local x = math.fmod((index-1),m.width) + 1\n					local y = math.floor((index-1) / m.width) + 1\n\n					if (m.layers[key][y] == nil) then m.layers[key][y] = {} end\n					m.layers[key][y][x] = tile\n				end\n			end\n\n			-- if 'objectgroup'\n		end\n\n		--[[\n		local serpent = require('serpent')\n		local file = io.output('conv_'.._dir..'.lua')\n		io.write(serpent.block(m, {comment = false})) -- multi-line indented, no self-ref section\n		io.close(file)\n		]]\n\n		return m\n	end\n}\n\n",
			"file": "map.lua",
			"file_size": 5493,
			"file_write_time": 131166142061959617,
			"settings":
			{
				"buffer_size": 5301,
				"line_ending": "Windows"
			}
		},
		{
			"file": "player.lua",
			"settings":
			{
				"buffer_size": 2995,
				"line_ending": "Windows"
			}
		},
		{
			"file": "maps/plicard.lua",
			"settings":
			{
				"buffer_size": 32597,
				"line_ending": "Windows"
			}
		},
		{
			"file": "maps/testMap.lua",
			"settings":
			{
				"buffer_size": 31865,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/nihiven.sublime-build",
	"command_palette":
	{
		"height": 35.0,
		"selected_items":
		[
			[
				"todo",
				"Show TODOs: Project and open files"
			],
			[
				"",
				"About"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"package ",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"Package Control: up",
				"Package Control: Upgrade Package"
			],
			[
				"Package Control: in",
				"Package Control: Install Package"
			],
			[
				"git push",
				"Git: Push"
			],
			[
				"git comm	",
				"Git: Commit"
			],
			[
				"git ad",
				"Git: Add Current File"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git",
				"Package Control: Install Package"
			]
		],
		"width": 432.0
	},
	"console":
	{
		"height": 167.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": true,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/nihiven/Desktop/map.lua",
		"/E/Google Drive/Code/python/value-prop/gameUpdateQueue.py",
		"/E/Google Drive/Code/python/destiny-exotic-tracker/exotic.py",
		"/C/Users/nihiven/Desktop/testWeb/Focus/credits.html",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/3rdparty/serpent/README.md",
		"/C/Users/nihiven/Desktop/Documentation/Documentation.html",
		"/C/Users/nihiven/Desktop/LinuxShare/bx.sh",
		"/C/Users/Public/Desktop/Elite Dangerous Launcher.lnk",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/todo.txt",
		"/E/Games/steam/SteamApps/common/Starbound/doc/lua/projectile.md",
		"/E/Games/steam/SteamApps/common/Starbound/doc/OPENSOURCE.md",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/test.sql",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/maps/lab.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/maps/plicard.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/escape.sublime-project",
		"/C/Users/nihiven/Desktop/sbh/SuperBloodHockey/SuperBloodHockey.csproj",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/player.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/map.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/main.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/3rdparty/anim8/anim8.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/3rdparty/inspect.lua",
		"/E/Google Drive/www/nihiven.github.io/index.html",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/conv_plicard.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/plicard.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/testConv.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/maps/testMap.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/maps/testlab.lua",
		"/C/Users/nihiven/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/player",
		"/E/Google Drive/Code/ld34/main.lua",
		"/C/Users/nihiven/Desktop/AlexaSkill.js",
		"/C/Users/nihiven/Desktop/lighting/main.lua",
		"/C/Users/nihiven/Desktop/lighting/lib/light.lua",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/maps/lab/test.lua",
		"/E/Google Drive/Code/Game Prototypes/theroom/luda.conf",
		"/E/Google Drive/Code/Game Prototypes/escape-lua/.gitignore",
		"/C/Users/nihiven/AppData/Roaming/Sublime Text 2/Packages/User/nihiven.sublime-build",
		"/C/Users/nihiven/AppData/Roaming/Sublime Text 2/Settings/Session.sublime_session",
		"/E/Google Drive/Code/Game Prototypes/theroom/main.lua",
		"/E/Google Drive/Code/ld34/menu.lua",
		"/E/Google Drive/Code/ld34/logic.lua",
		"/E/Google Drive/RPGMV/Focus/fonts/gamefont.css",
		"/E/Google Drive/Code/ld34/game.lua",
		"/C/652C030D3D26",
		"/C/fallout3",
		"/C/love.bat",
		"/C/Users/nihiven/AppData/Roaming/Sublime Text 2/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/nihiven/AppData/Local/Temp/7zO08EEC22B/simplex3d.glsl",
		"/C/Users/nihiven/AppData/Local/Temp/7zO08E70694/hsv.glsl",
		"/C/Users/nihiven/AppData/Local/Temp/7zO08EF0354/class.lua",
		"/C/Users/nihiven/AppData/Local/Temp/7zO08E67434/input.lua",
		"/C/Users/nihiven/AppData/Local/Temp/7zO06C7E3FA/e0005.lua",
		"/C/Users/nihiven/AppData/Local/Temp/7zO8B056956/conf.lua",
		"/C/Users/nihiven/AppData/Local/Temp/7zO8B0EB111/main.lua",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/colors.lua",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/items.lua",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/main.lua",
		"/E/Google Drive/Code/ld34/cupid.lua",
		"/E/Google Drive/Code/ld34/.gitignore",
		"/E/Google Drive/Code/ld34/README.md",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/conf.lua",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/feria.lua",
		"/E/Google Drive/Code/ld34/debug.lua",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/todo.txt",
		"/C/Users/nihiven/AppData/Roaming/mIRC/advent/7data.txt",
		"/C/Users/nihiven/AppData/Roaming/mIRC/advent/7data_work.txt",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/onij.sublime-workspace",
		"/E/Google Drive/Code/meteor/ntunes/ntunes.css",
		"/E/Google Drive/Code/meteor/ntunes/ntunes.js",
		"/E/Google Drive/Code/meteor/ntunes/ntunes.html",
		"/E/Documents/EASHL Search/EASHL-export/EASHL_custom.js",
		"/E/Documents/EASHL Search/EASHL-export/EASHL.js",
		"/E/Google Drive/Code/meteor/ntunes/README.md",
		"/E/Google Drive/Code/node/echonest/echo.js",
		"/E/Google Drive/Code/node/ntunes-node/index.html",
		"/E/Google Drive/Code/node/ntunes-node/torrent_test.js",
		"/E/Google Drive/Code/node/webtorrent/bin/test.js",
		"/E/Google Drive/Code/node/webtorrent/bin/cmd.js",
		"/E/Google Drive/Code/node/ntunes-node/index.js",
		"/C/Users/nihiven/.node-gyp/0.12.2/deps/uv/include/pshpack4.h",
		"/C/Users/nihiven/.node-gyp/0.12.2/deps/uv/src/win/winsock2.h",
		"/E/Google Drive/Code/node/index.js",
		"/E/Google Drive/Code/node/bot-tutorial-nodejs/bot.js",
		"/E/Google Drive/Code/node/bot-tutorial-nodejs/index.js",
		"/E/Google Drive/Code/node/bot-tutorial-nodejs/public/node.svg",
		"/E/Google Drive/www/nihiven.github.io/stylesheets/styles.css",
		"/E/Google Drive/www/nihiven.github.io/javascripts/scale.fix.js",
		"/E/Google Drive/Code/Game Prototypes/love_test/onij/conf.lua",
		"/C/Users/nihiven/Desktop/my new site dude/index.html",
		"/E/Google Drive/nvn.net/index.html",
		"/E/Google Drive/nvn.net/g/a.css",
		"/C/Users/nihiven/Desktop/aaaa/nvn-test/home/index.html",
		"/E/Google Drive/nvn.net/index.asp",
		"/C/Users/nihiven/Desktop/my new site dude/g/a.css",
		"/C/Users/nihiven/Desktop/nvn-test/index.asp",
		"/E/Google Drive/Code/Game Prototypes/love_test/index.html",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/README.md",
		"/C/Users/nihiven/Desktop/fame/fame.aslx",
		"/C/Users/nihiven/Desktop/index.html",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/lua.conf",
		"/C/Users/nihiven/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/E/Google Drive/Code/Game Prototypes/love_test/ONiJ/onij.sublime-project",
		"/E/Google Drive/Code/Game Prototypes/love_test/main.lua",
		"/E/Google Drive/Code/Game Prototypes/love_test/feria.lua",
		"/E/Google Drive/Code/Game Prototypes/onij/onij.html",
		"/E/Google Drive/Code/Game Prototypes/onij/Jaguar/css/onij.css",
		"/C/Users/nihiven/Desktop/monkey_island.html",
		"/E/Google Drive/Code/Game Prototypes/onij/audio_template.html",
		"/E/Google Drive/Code/Game Prototypes/onij/Jaguar/css/jquery-Jaguar-3.2.css",
		"/E/Google Drive/Code/Game Prototypes/onij/Jaguar/css/monkey_island.css",
		"/E/Google Drive/Code/Game Prototypes/jaguar-engine/monkey_island.html",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/mainmenu.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/splash.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/main.lua",
		"/C/Users/nihiven/Desktop/lua-libxml-master/docs/quick_start.md",
		"/C/Users/nihiven/Desktop/lua-libxml-master/xml/init.lua",
		"/C/Users/nihiven/Desktop/lua-libxml-master/README.md",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/fire.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/options.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/ingame.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/AnAL.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/map.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/maps/floors/1-1-1.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/config.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/TSerial.lua",
		"/E/Google Drive/Code/Game Prototypes/mrrescue/resources.lua"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"map.",
			"debug",
			"1",
			"[44]",
			"nil",
			"image",
			"deferred",
			"draw(",
			"513",
			"tileKey",
			"_tileQuads",
			"debug",
			"_tilesetBatch",
			"love",
			"entities.",
			"for",
			"map",
			"wind",
			"screen",
			"yello",
			"newgame",
			"fonts",
			"font",
			"fonts",
			"font",
			"fonts",
			"neon",
			"img",
			"neon",
			"font",
			"diff",
			"problemsRemaining",
			"game",
			"gmae",
			"screen",
			"dot",
			"globals",
			"dt",
			"print",
			"deep",
			"skyblue",
			"blue",
			"build",
			"buildlVerbGrid",
			"float",
			"load",
			"cont",
			"clickInventory",
			"action",
			"ui.inv",
			"inventoryColorSelected",
			"inventoryColorNormal",
			"inventoryY",
			"inventoryX",
			"inventoryShow",
			"inventorySelected",
			"inventoryShow",
			"buildVerbGrid",
			"getheight",
			"message",
			"_pf",
			"_p(",
			"messagesColorPeople",
			"_p(",
			"people",
			"color",
			"ui.msg",
			"ui.msg.color",
			"messagesColorRoom",
			"for",
			"for ",
			"messagesColorSystem",
			"love.graphics.printf(",
			"love.graphics.print(",
			"setcolor",
			"messagesPeopleColor",
			"messagesRoomColor",
			"messagesSysColor",
			"room",
			"messageSysColor",
			"messagesRoomColor",
			"inventoryselecte",
			"inventorynormal",
			"items_selected",
			"addme",
			"setcolor",
			"show_items",
			"auto",
			"then",
			"jaguar",
			"my",
			"adventure",
			"monkey",
			"skin",
			".css",
			"start_sc",
			"menu_key",
			"debug_key",
			"oni.",
			"for",
			"addMessage",
			"people"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"3",
			"_pf(",
			"_p(",
			"messagesColorPeople",
			"messagesColorRoom",
			"messagesColorSystem",
			"inventorySelected",
			"",
			"addSystemMessage"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.lua",
					"settings":
					{
						"buffer_size": 2795,
						"regions":
						{
						},
						"selection":
						[
							[
								618,
								618
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "map.lua",
					"settings":
					{
						"buffer_size": 5301,
						"regions":
						{
						},
						"selection":
						[
							[
								896,
								896
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "player.lua",
					"settings":
					{
						"buffer_size": 2995,
						"regions":
						{
						},
						"selection":
						[
							[
								2754,
								2754
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "maps/plicard.lua",
					"settings":
					{
						"buffer_size": 32597,
						"regions":
						{
						},
						"selection":
						[
							[
								449,
								449
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 546.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "maps/testMap.lua",
					"settings":
					{
						"buffer_size": 31865,
						"regions":
						{
						},
						"selection":
						[
							[
								979,
								979
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.474828175587,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 204.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 90.0,
	"status_bar_visible": true
}
